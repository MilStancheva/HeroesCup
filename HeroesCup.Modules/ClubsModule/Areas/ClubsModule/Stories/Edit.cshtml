@model ClubsModule.Models.StoryEditModel
@inject IAuthorizationService Auth
@inject ManagerLocalizer Localizer
@inject HeroesCup.Localization.ManagerLocalizer HeroesCupLocalizer
@{
    ViewBag.Title = "Edit story";
    ViewBag.MenuItem = HeroesCupLocalizer.Story["Stories"];

    var missions = Model.Missions != null && Model.Missions.Count() > 0 ? Model.Missions.ToList() : new List<HeroesCup.Data.Models.Mission>();
    var missionsSelectList = new SelectList(missions, "Id", "Title");
}

@section script{
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.MainScriptUrl)"></script>
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.EditorScriptUrl)"></script>
}

@using (var form = Html.BeginForm("Save", "Stories", FormMethod.Post, new { @class = "form validate", role = "form", novalidate = "", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.Story.Id)
    @Html.HiddenFor(m => m.ImageSrc)

    <div class="top">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@HeroesCupLocalizer.Mission["Missions"]</li>
                <li class="breadcrumb-item" aria-current="page"><a href="@Url.Action("List")">@HeroesCupLocalizer.Story["Stories"]</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Localizer.General["Edit"]</li>
            </ol>
        </nav>

        <div class="container-fluid">
            <div class="top-nav">
                @if ((await Auth.AuthorizeAsync(User, ClubsModule.Permissions.StoriesSave)).Succeeded)
                {
                    <button type="submit" class="btn btn-labeled btn-success pull-right">
                        <span class="btn-label">
                            <i class="fas fa-check"></i>
                        </span>
                        @Localizer.General["Save"]
                    </button>
                }

                @if ((await Auth.AuthorizeAsync(User, ClubsModule.Permissions.StoriesPublish)).Succeeded)
                {
                    @if (Model.Story.IsPublished == false)
                    {
                        <button asp-action="Publish" class="btn btn-labeled btn-success pull-right">
                            <span class="btn-label">
                                <i class="fas fa-check"></i>
                            </span>
                            @Localizer.General["Publish"]
                        </button>
                    }
                    else
                    {
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="btnGroupDrop1">
                                <button asp-action="Unpublish" class="dropdown-item" href="#"><i class="fas fa-undo"></i> @Localizer.General["Unpublish"]</button>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <span class="title">@Localizer.General["General"]</span>
            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.Mission["Mission"]</label>
                            @Html.DropDownListFor(m => m.Story.MissionId, missionsSelectList, new { @class = "form-control", required="" })
                            <div class="invalid-feedback">
                                @HeroesCupLocalizer.General["Mandatory field"]
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.General["Image"]</label>
                            <div class="row col-12">
                                <div class="col-6">
                                    @if (Model.ImageSrc != null)
                                    {
                                        <img src="@Model.ImageSrc" alt="Mission Image">
                                    }
                                    else
                                    {
                                        <img src="~/manager/clubsmodule/images/no_image.png" alt="Mission Image">
                                    }

                                </div>
                                <div class="col-6">
                                    <input type="file" asp-for="UploadedImage" class="form-control-file" />
                                    @Html.ValidationMessageFor(model => model.UploadedImage, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.General["Content"]</label>
                            @Html.TextAreaFor(m => m.Story.Content, new { @class = "form-control small", @id = "editor", required = "" })
                            <div class="invalid-feedback">
                                @HeroesCupLocalizer.General["Mandatory field"]
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
